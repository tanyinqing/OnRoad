package com.xlw.model;

import java.util.List;
import com.xlw.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table LOCATION.
 */
public class Location {

    private Long id;
    private String lat;
    private String lng;
    private java.util.Date locDate;
    private Long serverId;      // 服务器端id
    private Integer statusFlag; // 同步状态
    private long tripId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LocationDao myDao;

    private Trip trip;
    private Long trip__resolvedKey;

    private List<Photo> photos;
    private List<Feeling> feelings;

    public Location() {
    }

    public Location(Long id) {
        this.id = id;
    }

    public Location(Long id, String lat, String lng, java.util.Date locDate, Long serverId, Integer statusFlag, long tripId) {
        this.id = id;
        this.lat = lat;
        this.lng = lng;
        this.locDate = locDate;
        this.serverId = serverId;
        this.statusFlag = statusFlag;
        this.tripId = tripId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLocationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getLat() {
        return lat;
    }

    public void setLat(String lat) {
        this.lat = lat;
    }

    public String getLng() {
        return lng;
    }

    public void setLng(String lng) {
        this.lng = lng;
    }

    public java.util.Date getLocDate() {
        return locDate;
    }

    public void setLocDate(java.util.Date locDate) {
        this.locDate = locDate;
    }

    public Long getServerId() {
        return serverId;
    }

    public void setServerId(Long serverId) {
        this.serverId = serverId;
    }

    public Integer getStatusFlag() {
        return statusFlag;
    }

    public void setStatusFlag(Integer statusFlag) {
        this.statusFlag = statusFlag;
    }

    public long getTripId() {
        return tripId;
    }

    public void setTripId(long tripId) {
        this.tripId = tripId;
    }

    /** To-one relationship, resolved on first access. */
    public Trip getTrip() {
        long __key = this.tripId;
        if (trip__resolvedKey == null || !trip__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TripDao targetDao = daoSession.getTripDao();
            Trip tripNew = targetDao.load(__key);
            synchronized (this) {
                trip = tripNew;
            	trip__resolvedKey = __key;
            }
        }
        return trip;
    }

    public void setTrip(Trip trip) {
        if (trip == null) {
            throw new DaoException("To-one property 'tripId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.trip = trip;
            tripId = trip.getId();
            trip__resolvedKey = tripId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Photo> getPhotos() {
        if (photos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhotoDao targetDao = daoSession.getPhotoDao();
            List<Photo> photosNew = targetDao._queryLocation_Photos(id);
            synchronized (this) {
                if(photos == null) {
                    photos = photosNew;
                }
            }
        }
        return photos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPhotos() {
        photos = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Feeling> getFeelings() {
        if (feelings == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FeelingDao targetDao = daoSession.getFeelingDao();
            List<Feeling> feelingsNew = targetDao._queryLocation_Feelings(id);
            synchronized (this) {
                if(feelings == null) {
                    feelings = feelingsNew;
                }
            }
        }
        return feelings;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFeelings() {
        feelings = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
